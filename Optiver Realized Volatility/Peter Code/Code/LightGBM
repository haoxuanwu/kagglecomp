{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LightGBM","provenance":[],"collapsed_sections":[],"mount_file_id":"1DF_1J4jcXj_R6M7hq_VTAWisJqxAZD7c","authorship_tag":"ABX9TyN6Za4CbKyFp1ncOwHQGrLe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":21,"metadata":{"id":"gRfRviUadqtO","executionInfo":{"status":"ok","timestamp":1658001532838,"user_tz":300,"elapsed":179,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}}},"outputs":[],"source":["import gc\n","import glob\n","import os\n","import time\n","import traceback\n","from contextlib import contextmanager\n","from enum import Enum\n","from typing import Dict, List, Optional, Tuple\n","import torch\n","\n","import seaborn as sns\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import lightgbm as lgb\n","from IPython.display import display\n","\n","from joblib import delayed, Parallel\n","from sklearn.decomposition import LatentDirichletAllocation\n","from sklearn.manifold import TSNE\n","from sklearn.model_selection import GroupKFold\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.preprocessing import minmax_scale\n","from sklearn.metrics import r2_score\n","from sklearn.model_selection import train_test_split\n","from tqdm import tqdm_notebook as tqdm\n","\n","@contextmanager\n","def timer(name: str):\n","    s = time.time()\n","    yield\n","    elapsed = time.time() - s\n","    print(f'[{name}] {elapsed: .3f}sec')\n","    \n","def print_trace(name: str = ''):\n","    print(f'ERROR RAISED IN {name or \"anonymous\"}')\n","    print(traceback.format_exc())"]},{"cell_type":"code","source":["DATA_DIR = '/content/drive/MyDrive/kagglecomp/Optiver Realized Volatility/Peter Code/Data'\n","train = pd.read_csv(os.path.join(DATA_DIR, 'train.csv'))\n","train = train[train['stock_id'] <= 2]\n","stock_ids = set(train['stock_id'])"],"metadata":{"id":"7phi13ZKdyni","executionInfo":{"status":"ok","timestamp":1657999470217,"user_tz":300,"elapsed":1125,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["class DataBlock(Enum):\n","    TRAIN = 1\n","    TEST = 2\n","    BOTH = 3\n","    \n","def load_stock_data(stock_id: int, directory: str) -> pd.DataFrame:\n","    return pd.read_parquet(os.path.join(DATA_DIR, directory, f'stock_id={stock_id}'))\n","\n","def load_data(stock_id: int, stem: str, block: DataBlock) -> pd.DataFrame:\n","    if block == DataBlock.TRAIN:\n","        return load_stock_data(stock_id, f'{stem}_train.parquet')\n","    elif block == DataBlock.TEST:\n","        return load_stock_data(stock_id, f'{stem}_test.parquet')\n","    else:\n","        return pd.concat([\n","            load_data(stock_id, stem, DataBlock.TRAIN),\n","            load_data(stock_id, stem, DataBlock.TEST)\n","        ]).reset_index(drop=True)\n","\n","def load_book(stock_id: int, block: DataBlock=DataBlock.TRAIN) -> pd.DataFrame:\n","    return load_data(stock_id, 'book', block)\n","\n","\n","def load_trade(stock_id: int, block=DataBlock.TRAIN) -> pd.DataFrame:\n","    return load_data(stock_id, 'trade', block)\n","\n","def calc_wap1(df: pd.DataFrame) -> pd.Series:\n","    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) / (df['bid_size1'] + df['ask_size1'])\n","    return wap\n","\n","\n","def calc_wap2(df: pd.DataFrame) -> pd.Series:\n","    wap = (df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']) / (df['bid_size2'] + df['ask_size2'])\n","    return wap\n","\n","\n","def realized_volatility(series):\n","    return np.sqrt(np.sum(series**2))\n","\n","\n","def log_return(series: np.ndarray):\n","    return np.log(series).diff()\n","\n","\n","def log_return_df2(series: np.ndarray):\n","    return np.log(series).diff(2)\n","\n","def flatten_name(prefix, src_names):\n","    ret = []\n","    for c in src_names:\n","        if c[0] in ['time_id', 'stock_id']:\n","            ret.append(c[0])\n","        else:\n","            ret.append('.'.join([prefix] + list(c)))\n","    return ret\n","\n","def make_book_feature(stock_id, block = DataBlock.TRAIN):\n","    book = load_book(stock_id, block)\n","\n","    book['wap1'] = calc_wap1(book)\n","    book['wap2'] = calc_wap2(book)\n","    book['log_return1'] = book.groupby(['time_id'])['wap1'].apply(log_return)\n","    book['log_return2'] = book.groupby(['time_id'])['wap2'].apply(log_return)\n","    book['log_return_ask1'] = book.groupby(['time_id'])['ask_price1'].apply(log_return)\n","    book['log_return_ask2'] = book.groupby(['time_id'])['ask_price2'].apply(log_return)\n","    book['log_return_bid1'] = book.groupby(['time_id'])['bid_price1'].apply(log_return)\n","    book['log_return_bid2'] = book.groupby(['time_id'])['bid_price2'].apply(log_return)\n","\n","    book['wap_balance'] = abs(book['wap1'] - book['wap2'])\n","    book['price_spread'] = (book['ask_price1'] - book['bid_price1']) / ((book['ask_price1'] + book['bid_price1']) / 2)\n","    book['bid_spread'] = book['bid_price1'] - book['bid_price2']\n","    book['ask_spread'] = book['ask_price1'] - book['ask_price2']\n","    book['total_volume'] = (book['ask_size1'] + book['ask_size2']) + (book['bid_size1'] + book['bid_size2'])\n","    book['volume_imbalance'] = abs((book['ask_size1'] + book['ask_size2']) - (book['bid_size1'] + book['bid_size2']))\n","    \n","    features = {\n","        'seconds_in_bucket': ['count'],\n","        'wap1': [np.sum, np.mean, np.std],\n","        'wap2': [np.sum, np.mean, np.std],\n","        'log_return1': [np.sum, realized_volatility, np.mean, np.std],\n","        'log_return2': [np.sum, realized_volatility, np.mean, np.std],\n","        'log_return_ask1': [np.sum, realized_volatility, np.mean, np.std],\n","        'log_return_ask2': [np.sum, realized_volatility, np.mean, np.std],\n","        'log_return_bid1': [np.sum, realized_volatility, np.mean, np.std],\n","        'log_return_bid2': [np.sum, realized_volatility, np.mean, np.std],\n","        'wap_balance': [np.sum, np.mean, np.std],\n","        'price_spread':[np.sum, np.mean, np.std],\n","        'bid_spread':[np.sum, np.mean, np.std],\n","        'ask_spread':[np.sum, np.mean, np.std],\n","        'total_volume':[np.sum, np.mean, np.std],\n","        'volume_imbalance':[np.sum, np.mean, np.std]\n","    }\n","    \n","    agg = book.groupby('time_id').agg(features).reset_index(drop=False)\n","    agg.columns = flatten_name('book', agg.columns)\n","    agg['stock_id'] = stock_id\n","    \n","    for time in [450, 300, 150]:\n","        d = book[book['seconds_in_bucket'] >= time].groupby('time_id').agg(features).reset_index(drop=False)\n","        d.columns = flatten_name(f'book_{time}', d.columns)\n","        agg = pd.merge(agg, d, on='time_id', how='left')\n","    return agg\n","\n","def make_trade_feature(stock_id, block = DataBlock.TRAIN):\n","    trade = load_trade(stock_id, block)\n","    trade['log_return'] = trade.groupby('time_id')['price'].apply(log_return)\n","\n","    features = {\n","        'log_return':[realized_volatility],\n","        'seconds_in_bucket':['count'],\n","        'size':[np.sum],\n","        'order_count':[np.mean],\n","    }\n","\n","    agg = trade.groupby('time_id').agg(features).reset_index()\n","    agg.columns = flatten_name('trade', agg.columns)\n","    agg['stock_id'] = stock_id\n","        \n","    for time in [450, 300, 150]:\n","        d = trade[trade['seconds_in_bucket'] >= time].groupby('time_id').agg(features).reset_index(drop=False)\n","        d.columns = flatten_name(f'trade_{time}', d.columns)\n","        agg = pd.merge(agg, d, on='time_id', how='left')\n","    return agg\n","\n","def make_book_feature_v2(stock_id, block = DataBlock.TRAIN):\n","    book = load_book(stock_id, block)\n","\n","    prices = book.set_index('time_id')[['bid_price1', 'ask_price1', 'bid_price2', 'ask_price2']]\n","    time_ids = list(set(prices.index))\n","\n","    ticks = {}\n","    for tid in time_ids:\n","        try:\n","            price_list = prices.loc[tid].values.flatten()\n","            price_diff = sorted(np.diff(sorted(set(price_list))))\n","            ticks[tid] = price_diff[0]\n","        except Exception:\n","            print_trace(f'tid={tid}')\n","            ticks[tid] = np.nan\n","        \n","    dst = pd.DataFrame()\n","    dst['time_id'] = np.unique(book['time_id'])\n","    dst['stock_id'] = stock_id\n","    dst['tick_size'] = dst['time_id'].map(ticks)\n","\n","    return dst\n","\n","\n","def make_features(base, block):\n","    stock_ids = set(base['stock_id'])\n","    with timer('books'):\n","        books = Parallel(n_jobs=-1)(delayed(make_book_feature)(i, block) for i in stock_ids)\n","        book = pd.concat(books)\n","\n","    with timer('trades'):\n","        trades = Parallel(n_jobs=-1)(delayed(make_trade_feature)(i, block) for i in stock_ids)\n","        trade = pd.concat(trades)\n","\n","    with timer('extra features'):\n","        df = pd.merge(base, book, on=['stock_id', 'time_id'], how='left')\n","        df = pd.merge(df, trade, on=['stock_id', 'time_id'], how='left')\n","        #df = make_extra_features(df)\n","\n","    return df\n","\n","\n","def make_features_v2(base, block):\n","    stock_ids = set(base['stock_id'])\n","    with timer('books(v2)'):\n","        books = Parallel(n_jobs=-1)(delayed(make_book_feature_v2)(i, block) for i in stock_ids)\n","        book_v2 = pd.concat(books)\n","\n","    d = pd.merge(base, book_v2, on=['stock_id', 'time_id'], how='left')\n","    return d\n","\n","def rmspe(y_true, y_pred):\n","  return  (np.sqrt(np.mean(np.square((y_true - y_pred) / y_true))))\n","\n"],"metadata":{"id":"FfSiYltveDgJ","executionInfo":{"status":"ok","timestamp":1658001542549,"user_tz":300,"elapsed":587,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["df = make_features(train, DataBlock.TRAIN)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cxgFEp6peHwW","executionInfo":{"status":"ok","timestamp":1658006041188,"user_tz":300,"elapsed":112042,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}},"outputId":"4776c41b-9397-4a27-bb54-a4a6578fb701"},"execution_count":84,"outputs":[{"output_type":"stream","name":"stdout","text":["[books]  100.036sec\n","[trades]  11.763sec\n","[extra features]  0.233sec\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"jedOiZrUnWTW","executionInfo":{"status":"ok","timestamp":1658005887094,"user_tz":300,"elapsed":131,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}}},"execution_count":79,"outputs":[]},{"cell_type":"code","source":["X = df.drop(['target', 'stock_id', 'time_id'], axis=1)\n","Y = df['target']\n","\n","# Train Test Split\n","x_train, x_eval, y_train, y_eval = train_test_split(X, Y, test_size=0.2)"],"metadata":{"id":"cPHO-fm7eQDl","executionInfo":{"status":"ok","timestamp":1658006088751,"user_tz":300,"elapsed":192,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}}},"execution_count":85,"outputs":[]},{"cell_type":"code","source":["# Train and Evaluate\n","lgb_train = lgb.Dataset(x_train, y_train)\n","\n","params = {'task': 'train', 'boosting_type': 'gbdt', 'objective': 'regression',\n","          'metric': 'rmsle', 'min_data': 1, 'verbose': -1}\n","\n","gbm = lgb.train(params, lgb_train, num_boost_round=50)\n","\n","pred = gbm.predict(x_eval)\n","R2 = round(r2_score(y_true = y_eval.values, y_pred = pred),3)\n","RMSPE = round(rmspe(y_true = y_eval.values, y_pred = pred),3)\n","print(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kegJNUBUeRg5","executionInfo":{"status":"ok","timestamp":1658006094592,"user_tz":300,"elapsed":4472,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}},"outputId":"8a26f3e3-2f98-465d-b3a6-56f88810819f"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["Performance of the naive prediction: R2 score: 0.806, RMSPE: 0.27\n"]}]},{"cell_type":"code","source":["feature_imp = pd.DataFrame(sorted(zip(gbm.feature_importance(),X.columns)), columns=['Value','Feature'])\n","#feature_imp[:10]\n","lgb.plot_importance(gbm, max_num_features = 20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"kdvJfR3vkBsF","executionInfo":{"status":"ok","timestamp":1658006569473,"user_tz":300,"elapsed":832,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}},"outputId":"040f68b7-5ae8-4686-a67a-0a96374524b2"},"execution_count":91,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f2a96404950>"]},"metadata":{},"execution_count":91},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Hyperparameter Tuning\n","#!pip install verstack\n","from verstack import LGBMTuner\n","tuner = LGBMTuner(metric = 'rmse') # <- the only required argument\n","tuner.fit(x_train, y_train)"],"metadata":{"id":"aL4FXFcbm4G7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pred = tuner.predict(x_eval)\n","R2 = round(r2_score(y_true = y_eval.values, y_pred = pred),3)\n","RMSPE = round(rmspe(y_true = y_eval.values, y_pred = pred),3)\n","print(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rcqBXllk-U82","executionInfo":{"status":"ok","timestamp":1658011538495,"user_tz":300,"elapsed":625,"user":{"displayName":"Haoxuan [Peter] Wu","userId":"09135652591918716343"}},"outputId":"7e73aa97-587d-4b55-dd2d-5e10bf5841c3"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["Performance of the naive prediction: R2 score: 0.811, RMSPE: 0.258\n"]}]}]}